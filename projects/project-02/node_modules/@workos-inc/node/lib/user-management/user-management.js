"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManagement = void 0;
const pagination_1 = require("../common/utils/pagination");
const serializers_1 = require("./serializers");
const fetch_and_deserialize_1 = require("../common/utils/fetch-and-deserialize");
const serializers_2 = require("../mfa/serializers");
const organization_membership_serializer_1 = require("./serializers/organization-membership.serializer");
const list_organization_memberships_options_serializer_1 = require("./serializers/list-organization-memberships-options.serializer");
const create_organization_membership_options_serializer_1 = require("./serializers/create-organization-membership-options.serializer");
const invitation_serializer_1 = require("./serializers/invitation.serializer");
const list_invitations_options_serializer_1 = require("./serializers/list-invitations-options.serializer");
const send_invitation_options_serializer_1 = require("./serializers/send-invitation-options.serializer");
const list_users_options_serializer_1 = require("./serializers/list-users-options.serializer");
const authenticate_with_email_verification_serializer_1 = require("./serializers/authenticate-with-email-verification.serializer");
const authenticate_with_organization_selection_options_serializer_1 = require("./serializers/authenticate-with-organization-selection-options.serializer");
const factor_serializer_1 = require("./serializers/factor.serializer");
const revoke_session_options_interface_1 = require("./interfaces/revoke-session-options.interface");
const update_organization_membership_options_serializer_1 = require("./serializers/update-organization-membership-options.serializer");
const identity_serializer_1 = require("./serializers/identity.serializer");
const toQueryString = (options) => {
    const searchParams = new URLSearchParams();
    const keys = Object.keys(options).sort();
    for (const key of keys) {
        const value = options[key];
        if (value) {
            searchParams.append(key, value);
        }
    }
    return searchParams.toString();
};
class UserManagement {
    constructor(workos) {
        this.workos = workos;
    }
    getUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/users/${userId}`);
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    listUsers(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new pagination_1.AutoPaginatable(yield (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/user_management/users', serializers_1.deserializeUser, options ? (0, list_users_options_serializer_1.serializeListUsersOptions)(options) : undefined), (params) => (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/user_management/users', serializers_1.deserializeUser, params), options ? (0, list_users_options_serializer_1.serializeListUsersOptions)(options) : undefined);
        });
    }
    createUser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/users', (0, serializers_1.serializeCreateUserOptions)(payload));
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    authenticateWithMagicAuth(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, serializers_1.serializeAuthenticateWithMagicAuthOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithPassword(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, serializers_1.serializeAuthenticateWithPasswordOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithCode(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, serializers_1.serializeAuthenticateWithCodeOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithRefreshToken(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, serializers_1.serializeAuthenticateWithRefreshTokenOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithTotp(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, serializers_1.serializeAuthenticateWithTotpOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithEmailVerification(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, authenticate_with_email_verification_serializer_1.serializeAuthenticateWithEmailVerificationOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithOrganizationSelection(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/authenticate', (0, authenticate_with_organization_selection_options_serializer_1.serializeAuthenticateWithOrganizationSelectionOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    getEmailVerification(emailVerificationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/email_verification/${emailVerificationId}`);
            return (0, serializers_1.deserializeEmailVerification)(data);
        });
    }
    sendVerificationEmail({ userId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/user_management/users/${userId}/email_verification/send`, {});
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    getMagicAuth(magicAuthId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/magic_auth/${magicAuthId}`);
            return (0, serializers_1.deserializeMagicAuth)(data);
        });
    }
    createMagicAuth(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/magic_auth', (0, serializers_1.serializeCreateMagicAuthOptions)(Object.assign({}, options)));
            return (0, serializers_1.deserializeMagicAuth)(data);
        });
    }
    /**
     * @deprecated Please use `createMagicAuth` instead. This method will be removed in a future major version.
     */
    sendMagicAuthCode(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workos.post('/user_management/magic_auth/send', (0, serializers_1.serializeSendMagicAuthCodeOptions)(options));
        });
    }
    verifyEmail({ code, userId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/user_management/users/${userId}/email_verification/confirm`, {
                code,
            });
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    getPasswordReset(passwordResetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/password_reset/${passwordResetId}`);
            return (0, serializers_1.deserializePasswordReset)(data);
        });
    }
    createPasswordReset(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/password_reset', (0, serializers_1.serializeCreatePasswordResetOptions)(Object.assign({}, options)));
            return (0, serializers_1.deserializePasswordReset)(data);
        });
    }
    /**
     * @deprecated Please use `createPasswordReset` instead. This method will be removed in a future major version.
     */
    sendPasswordResetEmail(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workos.post('/user_management/password_reset/send', (0, serializers_1.serializeSendPasswordResetEmailOptions)(payload));
        });
    }
    resetPassword(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/password_reset/confirm', (0, serializers_1.serializeResetPasswordOptions)(payload));
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    updateUser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.put(`/user_management/users/${payload.userId}`, (0, serializers_1.serializeUpdateUserOptions)(payload));
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    enrollAuthFactor(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/user_management/users/${payload.userId}/auth_factors`, (0, serializers_1.serializeEnrollAuthFactorOptions)(payload));
            return {
                authenticationFactor: (0, serializers_1.deserializeFactorWithSecrets)(data.authentication_factor),
                authenticationChallenge: (0, serializers_2.deserializeChallenge)(data.authentication_challenge),
            };
        });
    }
    listAuthFactors(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { userId } = options, restOfOptions = __rest(options, ["userId"]);
            return new pagination_1.AutoPaginatable(yield (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, `/user_management/users/${userId}/auth_factors`, factor_serializer_1.deserializeFactor, restOfOptions), (params) => (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, `/user_management/users/${userId}/auth_factors`, factor_serializer_1.deserializeFactor, params), restOfOptions);
        });
    }
    deleteUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workos.delete(`/user_management/users/${userId}`);
        });
    }
    getUserIdentities(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!userId) {
                throw new TypeError(`Incomplete arguments. Need to specify 'userId'.`);
            }
            const { data } = yield this.workos.get(`/user_management/users/${userId}/identities`);
            return (0, identity_serializer_1.deserializeIdentities)(data);
        });
    }
    getOrganizationMembership(organizationMembershipId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/organization_memberships/${organizationMembershipId}`);
            return (0, organization_membership_serializer_1.deserializeOrganizationMembership)(data);
        });
    }
    listOrganizationMemberships(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new pagination_1.AutoPaginatable(yield (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/user_management/organization_memberships', organization_membership_serializer_1.deserializeOrganizationMembership, options
                ? (0, list_organization_memberships_options_serializer_1.serializeListOrganizationMembershipsOptions)(options)
                : undefined), (params) => (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/user_management/organization_memberships', organization_membership_serializer_1.deserializeOrganizationMembership, params), options
                ? (0, list_organization_memberships_options_serializer_1.serializeListOrganizationMembershipsOptions)(options)
                : undefined);
        });
    }
    createOrganizationMembership(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/organization_memberships', (0, create_organization_membership_options_serializer_1.serializeCreateOrganizationMembershipOptions)(options));
            return (0, organization_membership_serializer_1.deserializeOrganizationMembership)(data);
        });
    }
    updateOrganizationMembership(organizationMembershipId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.put(`/user_management/organization_memberships/${organizationMembershipId}`, (0, update_organization_membership_options_serializer_1.serializeUpdateOrganizationMembershipOptions)(options));
            return (0, organization_membership_serializer_1.deserializeOrganizationMembership)(data);
        });
    }
    deleteOrganizationMembership(organizationMembershipId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workos.delete(`/user_management/organization_memberships/${organizationMembershipId}`);
        });
    }
    deactivateOrganizationMembership(organizationMembershipId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.put(`/user_management/organization_memberships/${organizationMembershipId}/deactivate`, {});
            return (0, organization_membership_serializer_1.deserializeOrganizationMembership)(data);
        });
    }
    reactivateOrganizationMembership(organizationMembershipId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.put(`/user_management/organization_memberships/${organizationMembershipId}/reactivate`, {});
            return (0, organization_membership_serializer_1.deserializeOrganizationMembership)(data);
        });
    }
    getInvitation(invitationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/invitations/${invitationId}`);
            return (0, invitation_serializer_1.deserializeInvitation)(data);
        });
    }
    findInvitationByToken(invitationToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/user_management/invitations/by_token/${invitationToken}`);
            return (0, invitation_serializer_1.deserializeInvitation)(data);
        });
    }
    listInvitations(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new pagination_1.AutoPaginatable(yield (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/user_management/invitations', invitation_serializer_1.deserializeInvitation, options ? (0, list_invitations_options_serializer_1.serializeListInvitationsOptions)(options) : undefined), (params) => (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/user_management/invitations', invitation_serializer_1.deserializeInvitation, params), options ? (0, list_invitations_options_serializer_1.serializeListInvitationsOptions)(options) : undefined);
        });
    }
    sendInvitation(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/user_management/invitations', (0, send_invitation_options_serializer_1.serializeSendInvitationOptions)(Object.assign({}, payload)));
            return (0, invitation_serializer_1.deserializeInvitation)(data);
        });
    }
    revokeInvitation(invitationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/user_management/invitations/${invitationId}/revoke`, null);
            return (0, invitation_serializer_1.deserializeInvitation)(data);
        });
    }
    revokeSession(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workos.post('/user_management/sessions/revoke', (0, revoke_session_options_interface_1.serializeRevokeSessionOptions)(payload));
        });
    }
    getAuthorizationUrl({ connectionId, codeChallenge, codeChallengeMethod, clientId, domainHint, loginHint, organizationId, provider, redirectUri, state, screenHint, }) {
        if (!provider && !connectionId && !organizationId) {
            throw new TypeError(`Incomplete arguments. Need to specify either a 'connectionId', 'organizationId', or 'provider'.`);
        }
        if (provider !== 'authkit' && screenHint) {
            throw new TypeError(`'screenHint' is only supported for 'authkit' provider`);
        }
        const query = toQueryString({
            connection_id: connectionId,
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod,
            organization_id: organizationId,
            domain_hint: domainHint,
            login_hint: loginHint,
            provider,
            client_id: clientId,
            redirect_uri: redirectUri,
            response_type: 'code',
            state,
            screen_hint: screenHint,
        });
        return `${this.workos.baseURL}/user_management/authorize?${query}`;
    }
    getLogoutUrl({ sessionId }) {
        if (!sessionId) {
            throw new TypeError(`Incomplete arguments. Need to specify 'sessionId'.`);
        }
        return `${this.workos.baseURL}/user_management/sessions/logout?session_id=${sessionId}`;
    }
    getJwksUrl(clientId) {
        if (!clientId) {
            throw TypeError('clientId must be a valid clientId');
        }
        return `${this.workos.baseURL}/sso/jwks/${clientId}`;
    }
}
exports.UserManagement = UserManagement;
