import { WorkOS } from '../workos';
import { AutoPaginatable } from '../common/utils/pagination';
import { AuthenticateWithCodeOptions, AuthenticateWithMagicAuthOptions, AuthenticateWithPasswordOptions, AuthenticateWithTotpOptions, AuthenticationResponse, ResetPasswordOptions, SendPasswordResetEmailOptions, CreateUserOptions, EnrollAuthFactorOptions, ListAuthFactorsOptions, ListUsersOptions, SendMagicAuthCodeOptions, SendVerificationEmailOptions, UpdateUserOptions, User, VerifyEmailOptions, AuthenticateWithRefreshTokenOptions, MagicAuth, CreateMagicAuthOptions, EmailVerification, PasswordReset, CreatePasswordResetOptions } from './interfaces';
import { Challenge } from '../mfa/interfaces';
import { OrganizationMembership } from './interfaces/organization-membership.interface';
import { ListOrganizationMembershipsOptions } from './interfaces/list-organization-memberships-options.interface';
import { CreateOrganizationMembershipOptions } from './interfaces/create-organization-membership-options.interface';
import { Invitation } from './interfaces/invitation.interface';
import { ListInvitationsOptions } from './interfaces/list-invitations-options.interface';
import { SendInvitationOptions } from './interfaces/send-invitation-options.interface';
import { AuthorizationURLOptions } from './interfaces/authorization-url-options.interface';
import { AuthenticateWithEmailVerificationOptions } from './interfaces/authenticate-with-email-verification-options.interface';
import { AuthenticateWithOrganizationSelectionOptions } from './interfaces/authenticate-with-organization-selection.interface';
import { Factor, FactorWithSecrets } from './interfaces/factor.interface';
import { RevokeSessionOptions } from './interfaces/revoke-session-options.interface';
import { UpdateOrganizationMembershipOptions } from './interfaces/update-organization-membership-options.interface';
import { Identity } from './interfaces/identity.interface';
export declare class UserManagement {
    private readonly workos;
    constructor(workos: WorkOS);
    getUser(userId: string): Promise<User>;
    listUsers(options?: ListUsersOptions): Promise<AutoPaginatable<User>>;
    createUser(payload: CreateUserOptions): Promise<User>;
    authenticateWithMagicAuth(payload: AuthenticateWithMagicAuthOptions): Promise<AuthenticationResponse>;
    authenticateWithPassword(payload: AuthenticateWithPasswordOptions): Promise<AuthenticationResponse>;
    authenticateWithCode(payload: AuthenticateWithCodeOptions): Promise<AuthenticationResponse>;
    authenticateWithRefreshToken(payload: AuthenticateWithRefreshTokenOptions): Promise<AuthenticationResponse>;
    authenticateWithTotp(payload: AuthenticateWithTotpOptions): Promise<AuthenticationResponse>;
    authenticateWithEmailVerification(payload: AuthenticateWithEmailVerificationOptions): Promise<AuthenticationResponse>;
    authenticateWithOrganizationSelection(payload: AuthenticateWithOrganizationSelectionOptions): Promise<AuthenticationResponse>;
    getEmailVerification(emailVerificationId: string): Promise<EmailVerification>;
    sendVerificationEmail({ userId, }: SendVerificationEmailOptions): Promise<{
        user: User;
    }>;
    getMagicAuth(magicAuthId: string): Promise<MagicAuth>;
    createMagicAuth(options: CreateMagicAuthOptions): Promise<MagicAuth>;
    /**
     * @deprecated Please use `createMagicAuth` instead. This method will be removed in a future major version.
     */
    sendMagicAuthCode(options: SendMagicAuthCodeOptions): Promise<void>;
    verifyEmail({ code, userId, }: VerifyEmailOptions): Promise<{
        user: User;
    }>;
    getPasswordReset(passwordResetId: string): Promise<PasswordReset>;
    createPasswordReset(options: CreatePasswordResetOptions): Promise<PasswordReset>;
    /**
     * @deprecated Please use `createPasswordReset` instead. This method will be removed in a future major version.
     */
    sendPasswordResetEmail(payload: SendPasswordResetEmailOptions): Promise<void>;
    resetPassword(payload: ResetPasswordOptions): Promise<{
        user: User;
    }>;
    updateUser(payload: UpdateUserOptions): Promise<User>;
    enrollAuthFactor(payload: EnrollAuthFactorOptions): Promise<{
        authenticationFactor: FactorWithSecrets;
        authenticationChallenge: Challenge;
    }>;
    listAuthFactors(options: ListAuthFactorsOptions): Promise<AutoPaginatable<Factor>>;
    deleteUser(userId: string): Promise<void>;
    getUserIdentities(userId: string): Promise<Identity[]>;
    getOrganizationMembership(organizationMembershipId: string): Promise<OrganizationMembership>;
    listOrganizationMemberships(options: ListOrganizationMembershipsOptions): Promise<AutoPaginatable<OrganizationMembership>>;
    createOrganizationMembership(options: CreateOrganizationMembershipOptions): Promise<OrganizationMembership>;
    updateOrganizationMembership(organizationMembershipId: string, options: UpdateOrganizationMembershipOptions): Promise<OrganizationMembership>;
    deleteOrganizationMembership(organizationMembershipId: string): Promise<void>;
    deactivateOrganizationMembership(organizationMembershipId: string): Promise<OrganizationMembership>;
    reactivateOrganizationMembership(organizationMembershipId: string): Promise<OrganizationMembership>;
    getInvitation(invitationId: string): Promise<Invitation>;
    findInvitationByToken(invitationToken: string): Promise<Invitation>;
    listInvitations(options: ListInvitationsOptions): Promise<AutoPaginatable<Invitation>>;
    sendInvitation(payload: SendInvitationOptions): Promise<Invitation>;
    revokeInvitation(invitationId: string): Promise<Invitation>;
    revokeSession(payload: RevokeSessionOptions): Promise<void>;
    getAuthorizationUrl({ connectionId, codeChallenge, codeChallengeMethod, clientId, domainHint, loginHint, organizationId, provider, redirectUri, state, screenHint, }: AuthorizationURLOptions): string;
    getLogoutUrl({ sessionId }: {
        sessionId: string;
    }): string;
    getJwksUrl(clientId: string): string;
}
